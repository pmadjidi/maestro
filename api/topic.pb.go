// Code generated by protoc-gen-go. DO NOT EDIT.
// source: topic.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TopicReq struct {
	Topic                []string `protobuf:"bytes,1,rep,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicReq) Reset()         { *m = TopicReq{} }
func (m *TopicReq) String() string { return proto.CompactTextString(m) }
func (*TopicReq) ProtoMessage()    {}
func (*TopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7312ad0e4fa171e8, []int{0}
}

func (m *TopicReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicReq.Unmarshal(m, b)
}
func (m *TopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicReq.Marshal(b, m, deterministic)
}
func (m *TopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicReq.Merge(m, src)
}
func (m *TopicReq) XXX_Size() int {
	return xxx_messageInfo_TopicReq.Size(m)
}
func (m *TopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicReq proto.InternalMessageInfo

func (m *TopicReq) GetTopic() []string {
	if m != nil {
		return m.Topic
	}
	return nil
}

type TopicResp struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               Status   `protobuf:"varint,2,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicResp) Reset()         { *m = TopicResp{} }
func (m *TopicResp) String() string { return proto.CompactTextString(m) }
func (*TopicResp) ProtoMessage()    {}
func (*TopicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7312ad0e4fa171e8, []int{1}
}

func (m *TopicResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicResp.Unmarshal(m, b)
}
func (m *TopicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicResp.Marshal(b, m, deterministic)
}
func (m *TopicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicResp.Merge(m, src)
}
func (m *TopicResp) XXX_Size() int {
	return xxx_messageInfo_TopicResp.Size(m)
}
func (m *TopicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicResp proto.InternalMessageInfo

func (m *TopicResp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TopicResp) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_SUCCESS
}

func init() {
	proto.RegisterType((*TopicReq)(nil), "api.TopicReq")
	proto.RegisterType((*TopicResp)(nil), "api.TopicResp")
}

func init() { proto.RegisterFile("topic.proto", fileDescriptor_7312ad0e4fa171e8) }

var fileDescriptor_7312ad0e4fa171e8 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc9, 0x2f, 0xc8,
	0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2, 0x29, 0x2e,
	0x49, 0x2c, 0x29, 0x2d, 0x86, 0x08, 0x29, 0x29, 0x70, 0x71, 0x84, 0x80, 0x54, 0x04, 0xa5, 0x16,
	0x0a, 0x89, 0x70, 0xb1, 0x82, 0x55, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x41, 0x38, 0x4a,
	0x0e, 0x5c, 0x9c, 0x50, 0x15, 0xc5, 0x05, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x4c, 0x99, 0x29, 0x42, 0xca, 0x5c, 0x6c, 0x10, 0xe3, 0x24, 0x98, 0x14,
	0x18, 0x35, 0xf8, 0x8c, 0xb8, 0xf5, 0x12, 0x0b, 0x32, 0xf5, 0x82, 0xc1, 0x42, 0x41, 0x50, 0x29,
	0xa3, 0x44, 0x2e, 0x56, 0xb0, 0x09, 0x42, 0x5a, 0x5c, 0x9c, 0xc5, 0xa5, 0x49, 0xc5, 0xc9, 0x45,
	0x99, 0x49, 0xa9, 0x42, 0xbc, 0x60, 0xa5, 0x30, 0xcb, 0xa5, 0xf8, 0x90, 0xb9, 0xc5, 0x05, 0x42,
	0x3a, 0x5c, 0xdc, 0xa5, 0x79, 0xc4, 0xaa, 0x4e, 0x62, 0x03, 0xfb, 0xc6, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xaa, 0xeb, 0xfd, 0x04, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopicClient is the client API for Topic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopicClient interface {
	Subscribe(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicResp, error)
	Unsubscribe(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicResp, error)
}

type topicClient struct {
	cc *grpc.ClientConn
}

func NewTopicClient(cc *grpc.ClientConn) TopicClient {
	return &topicClient{cc}
}

func (c *topicClient) Subscribe(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicResp, error) {
	out := new(TopicResp)
	err := c.cc.Invoke(ctx, "/api.Topic/subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicClient) Unsubscribe(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicResp, error) {
	out := new(TopicResp)
	err := c.cc.Invoke(ctx, "/api.Topic/unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicServer is the server API for Topic service.
type TopicServer interface {
	Subscribe(context.Context, *TopicReq) (*TopicResp, error)
	Unsubscribe(context.Context, *TopicReq) (*TopicResp, error)
}

// UnimplementedTopicServer can be embedded to have forward compatible implementations.
type UnimplementedTopicServer struct {
}

func (*UnimplementedTopicServer) Subscribe(ctx context.Context, req *TopicReq) (*TopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedTopicServer) Unsubscribe(ctx context.Context, req *TopicReq) (*TopicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}

func RegisterTopicServer(s *grpc.Server, srv TopicServer) {
	s.RegisterService(&_Topic_serviceDesc, srv)
}

func _Topic_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Topic/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).Subscribe(ctx, req.(*TopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topic_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Topic/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).Unsubscribe(ctx, req.(*TopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Topic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Topic",
	HandlerType: (*TopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subscribe",
			Handler:    _Topic_Subscribe_Handler,
		},
		{
			MethodName: "unsubscribe",
			Handler:    _Topic_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topic.proto",
}
