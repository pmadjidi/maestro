// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceReq struct {
	DeviceId             string   `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceKey            string   `protobuf:"bytes,2,opt,name=deviceKey,proto3" json:"deviceKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceReq) Reset()         { *m = DeviceReq{} }
func (m *DeviceReq) String() string { return proto.CompactTextString(m) }
func (*DeviceReq) ProtoMessage()    {}
func (*DeviceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

func (m *DeviceReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceReq.Unmarshal(m, b)
}
func (m *DeviceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceReq.Marshal(b, m, deterministic)
}
func (m *DeviceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceReq.Merge(m, src)
}
func (m *DeviceReq) XXX_Size() int {
	return xxx_messageInfo_DeviceReq.Size(m)
}
func (m *DeviceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceReq proto.InternalMessageInfo

func (m *DeviceReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceReq) GetDeviceKey() string {
	if m != nil {
		return m.DeviceKey
	}
	return ""
}

type DeviceResp struct {
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceResp) Reset()         { *m = DeviceResp{} }
func (m *DeviceResp) String() string { return proto.CompactTextString(m) }
func (*DeviceResp) ProtoMessage()    {}
func (*DeviceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}

func (m *DeviceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceResp.Unmarshal(m, b)
}
func (m *DeviceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceResp.Marshal(b, m, deterministic)
}
func (m *DeviceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceResp.Merge(m, src)
}
func (m *DeviceResp) XXX_Size() int {
	return xxx_messageInfo_DeviceResp.Size(m)
}
func (m *DeviceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceResp proto.InternalMessageInfo

func (m *DeviceResp) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_SUCCESS
}

func init() {
	proto.RegisterType((*DeviceReq)(nil), "api.DeviceReq")
	proto.RegisterType((*DeviceResp)(nil), "api.DeviceResp")
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x49, 0x2d, 0xcb,
	0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2, 0x29,
	0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x86, 0x08, 0x29, 0xb9, 0x72, 0x71, 0xba, 0x80, 0x95, 0x04, 0xa5,
	0x16, 0x0a, 0x49, 0x71, 0x71, 0x40, 0xd4, 0x7b, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0xc1, 0xf9, 0x42, 0x32, 0x5c, 0x9c, 0x10, 0xb6, 0x77, 0x6a, 0xa5, 0x04, 0x13, 0x58, 0x12, 0x21,
	0xa0, 0x64, 0xc8, 0xc5, 0x05, 0x33, 0xa6, 0xb8, 0x40, 0x48, 0x99, 0x8b, 0x0d, 0x62, 0x09, 0xd8,
	0x14, 0x3e, 0x23, 0x6e, 0xbd, 0xc4, 0x82, 0x4c, 0xbd, 0x60, 0xb0, 0x50, 0x10, 0x54, 0xca, 0xc8,
	0x94, 0x8b, 0x0d, 0xa2, 0x45, 0x48, 0x9b, 0x8b, 0x23, 0x28, 0x35, 0x3d, 0xb3, 0xb8, 0x24, 0xb5,
	0x48, 0x88, 0x0f, 0xac, 0x14, 0xee, 0x24, 0x29, 0x7e, 0x14, 0x7e, 0x71, 0x41, 0x12, 0x1b, 0xd8,
	0xdd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x19, 0xd0, 0xe4, 0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceClient interface {
	Register(ctx context.Context, in *DeviceReq, opts ...grpc.CallOption) (*DeviceResp, error)
}

type deviceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceClient(cc *grpc.ClientConn) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) Register(ctx context.Context, in *DeviceReq, opts ...grpc.CallOption) (*DeviceResp, error) {
	out := new(DeviceResp)
	err := c.cc.Invoke(ctx, "/api.Device/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
type DeviceServer interface {
	Register(context.Context, *DeviceReq) (*DeviceResp, error)
}

// UnimplementedDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (*UnimplementedDeviceServer) Register(ctx context.Context, req *DeviceReq) (*DeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Register(ctx, req.(*DeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Device_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
